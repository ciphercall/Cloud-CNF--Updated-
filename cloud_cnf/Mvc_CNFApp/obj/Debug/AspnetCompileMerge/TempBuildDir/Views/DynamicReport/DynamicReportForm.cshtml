@using System.Net.Mime
@using System.Web.UI.WebControls
@using iTextSharp.text
@using Microsoft.Ajax.Utilities
@using Mvc_CNFApp.Models
@model Mvc_CNFApp.Models.ASL_DREPORT



@{
    ViewBag.Title = "DynamicReportForm";
    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);

    CnfDbContext db = new CnfDbContext();

    List<SelectListItem> listReportType = new List<SelectListItem>();
    listReportType.Add(new SelectListItem { Text = "Export", Value = "Export" });
    listReportType.Add(new SelectListItem { Text = "Import", Value = "Import" });

    List<SelectListItem> listReportName = new List<SelectListItem>();
    listReportName.Add(new SelectListItem { Text = "Bill Forward", Value = "Bill Forward" });
    //listReportName.Add(new SelectListItem { Text = "Demo", Value = "Demo" });

}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.COMPID, new { id = "txtCompId", @Value = compid })

     <div id="contentHeaderBox">
        <h1 style="padding-left:16px">Create Dynamic Report</h1>
    </div>
    <br />
    <div class="col-md-12">
        <div class="form-group">
            <div class="row">
                @*<div class="col-md-1"></div>*@
                <div class="col-md-8">
                    <span>@Html.Label("name", "Report Name", htmlAttributes: new { @class = "control-label" })</span>
                    @Html.DropDownListFor(model => model.RPTNM, listReportName, "-Select-", new { @class = "form-control input-sm", id = "txtRPTNM",autofocus=true })
                </div>
                <div class="col-md-3">
                    <span>@Html.Label("name", "Report Type", htmlAttributes: new { @class = "control-label" })</span>
                    @Html.DropDownListFor(model => model.RPTTP, listReportType, "-Select-", new { @class = "form-control input-sm", id = "txtRPTTP" })
                </div>

                @Html.TextBoxFor(model => model.INSLTUDE, new { id = "latlon", style = "display: none;" })
                <input id="lat" type="hidden" />
                <input id="lon" type="hidden" />
                <input type="submit" class="btn btn-info" value="Search" id="SearchButtonID" name="command" style="display: none" />
            </div>
            <br />
        </div>
        <div>
            <hr/>
        </div>
        </div>
     <div class="col-md-12">
         @if (TempData["RPTNM"] != null && TempData["RPTTP"] != null)
         {
             List<SelectListItem> listTableID = new List<SelectListItem>();
             var tableID = (from n in db.AslTableDbSet select n).ToList();
             foreach (var res in tableID)
             {
                 if (res != null)
                 {
                     if (res.TABLENAME != "BILLING INFO")
                     {
                         listTableID.Add(new SelectListItem { Text = res.TABLENAME.ToString(), Value = res.TABLEID.ToString() });
                     }
                     
                 }
             }
             <div class="row">
                 
                
                   
                         <div class="col-md-5">
                             <span>@Html.Label("name", "Table Name", htmlAttributes: new { @class = "control-label" })</span>
                             @Html.DropDownListFor(model => model.TABLEID, listTableID, "-Select-", new { @class = "form-control input-sm", id = "txtTABLEID" })
                         </div>
                         <div class="col-md-5">
                             <span>@Html.Label("name", "Column Name", htmlAttributes: new { @class = "control-label" })</span>
                             @Html.DropDownListFor(model => model.FIELDID, Enumerable.Empty<SelectListItem>(), "empty", new { @class = "form-control input-sm", id = "txtFieldName" })
                         </div>
                        
                         <div class="col-md-1">
                             <span><br /></span>
                             <input type="submit" class="btn btn-info" value="Add" id="btnAdd" name="command" style="margin-top: 0px; margin-left: 5px" />
                         </div>
                 <div class="col-md-1"></div>
                
              
             </div>

             <br />
         }



         @if (TempData["message"] != null)
         {
             <div class="text-center">
                 <h6 style="color: #BD7F1C">@TempData["message"] </h6>
             </div>
             <br />
         }
         <div class="row">
             
             @if (TempData["RPTNM"] != null && TempData["RPTTP"] != null)
             {
                 //string tableid = Convert.ToString(TempData["TableID"]);
                 string ReportName = TempData["RPTNM"].ToString();
                 string ReportType = TempData["RPTTP"].ToString();
                 var getDRReport = (from n in db.AslDreportDbSet
                                    where n.COMPID == compid && n.RPTNM == ReportName && n.RPTTP == ReportType
                                    orderby n.RPTSL
                                    select n).ToList();
                 var findFieldName = from m in db.AslTableFieldDbSet select new { m.FIELDID, m.FIELDNAME };
                <div class="panel panel-primary">
                     <div class="table-responsive">
                         <table class="table table-striped">
                             <tr>
                                 <td>
                                     <h6>SL</h6>
                                 </td>
                                 <td><h6>Column Name</h6></td>
                                 <td></td>
                             </tr>

                             @foreach (var item in getDRReport)
                             {

                                 <tr>
                                     @Html.HiddenFor(model => item.ID)
                                     @Html.HiddenFor(model => item.COMPID)
                                     @Html.HiddenFor(model => item.RPTNM)
                                     @Html.HiddenFor(moddel => item.RPTTP)
                                     @Html.HiddenFor(model => item.TABLEID)

                                     <td>
                                         @Html.DisplayFor(model => item.RPTSL, new { style = "width:10em;" })
                                     </td>
                                     <td>
                                         @{
                                 char[] delimiterChars = { ',', ' ' };
                                 var fieldid = item.FIELDID;
                                 string text = Convert.ToString(fieldid);
                                 string[] words = text.Split(delimiterChars);
                                 string name = "";
                                 int i = 0;
                                 foreach (string s in words)
                                 {
                                     if (s != "")
                                     {
                                         foreach (var fileName in findFieldName)
                                         {
                                             if (fileName.FIELDID == s)
                                             {
                                                 if (i == 0)
                                                 {
                                                     name = name + Convert.ToString(fileName.FIELDNAME);
                                                     i++;
                                                 }
                                                 else
                                                 {
                                                     name = name + ", " + Convert.ToString(fileName.FIELDNAME);
                                                 }

                                             }
                                         }
                                     }
                                 }


                                         }
                                         @name
                                         @*@Html.DisplayFor(model => item.FIELDID, new { style = "width:10em;" })*@
                                     </td>

                                     <td>
                                         <span>
                                             <a href="@Url.Action("Delete", new { id = item.ID, cid = item.COMPID, reportName = item.RPTNM, reportType = item.RPTTP, tableID = item.TABLEID, sl = item.RPTSL })" class="btn btn-sm btn-danger">
                                                 <span class="glyphicon glyphicon-remove"></span>
                                             </a>
                                         </span>
                                     </td>
                                 </tr>

                             }

                         </table>
                     </div>
                </div>
                
             }
             else
             {
                 <div class="table-responsive">
                     <table class="table table-striped"></table>
                 </div>
             }
         </div>
         </div>
    
    
    
    
    
    @*<div class="container">
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-8">
                <div class="panel panel-info" style="padding: 0px; margin-bottom: 0px;">
                    <div class="panel-heading text-center">
                        <h4>Create Dynamic Report</h4>
                    </div>
                </div>

                <div class="jumbotron" style="padding-top: 20px; padding-bottom: 11px">
                    <div class="form-group">
                        <div class="row">
                           
                            <div class="col-md-8">
                                <span>@Html.Label("name", "Report Name", htmlAttributes: new { @class = "control-label" })</span>
                                @Html.DropDownListFor(model => model.RPTNM, listReportName, "-Select-", new { @class = "form-control input-sm", id = "txtRPTNM" })
                            </div>
                            <div class="col-md-3">
                                <span>@Html.Label("name", "Report Type", htmlAttributes: new { @class = "control-label" })</span>
                                @Html.DropDownListFor(model => model.RPTTP, listReportType, "-Select-", new { @class = "form-control input-sm", id = "txtRPTTP" })
                            </div>

                            @Html.TextBoxFor(model => model.INSLTUDE, new { id = "latlon", style = "display: none;" })
                            <input id="lat" type="hidden" />
                            <input id="lon" type="hidden" />
                            <input type="submit" class="btn btn-info" value="Search" id="SearchButtonID" name="command" style="display: none" />
                        </div>
                        <br />
                    </div>
                </div>
            </div>
            <div class="col-md-2"></div>
        </div>


        @if (TempData["RPTNM"] != null && TempData["RPTTP"] != null)
        {
            List<SelectListItem> listTableID = new List<SelectListItem>();
            var tableID = (from n in db.AslTableDbSet select n).ToList();
            foreach (var res in tableID)
            {
                if (res != null)
                {
                    listTableID.Add(new SelectListItem { Text = res.TABLENAME.ToString(), Value = res.TABLEID.ToString() });
                }
            }
            <div class="row">
                <div class="col-md-2"><br /></div>
                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-5">
                            <span>@Html.Label("name", "Table Name", htmlAttributes: new { @class = "control-label" })</span>
                            @Html.DropDownListFor(model => model.TABLEID, listTableID, "-Select-", new { @class = "form-control input-sm", id = "txtTABLEID" })
                        </div>
                        <div class="col-md-5">
                            <span>@Html.Label("name", "Column Name", htmlAttributes: new { @class = "control-label" })</span>
                            @Html.DropDownListFor(model => model.FIELDID, Enumerable.Empty<SelectListItem>(), "empty", new { @class = "form-control input-sm", id = "txtFieldName" })
                        </div>
                        <div class="col-md-1"></div>
                        <div class="col-md-1">
                            <span><br /></span>
                            <input type="submit" class="btn btn-info" value="Add" id="btnAdd" name="command" style="margin-top: 0px; margin-left: 5px" />
                        </div>
                    </div>
                </div>
                <div class="col-md-2"></div>
            </div>

            <br />
        }



        @if (TempData["message"] != null)
        {
            <div class="text-center">
                <h6 style="color: #BD7F1C">@TempData["message"] </h6>
            </div>
            <br />
        }

        <div class="row">
            <div class="col-md-2"></div>
            @if (TempData["RPTNM"] != null && TempData["RPTTP"] != null)
            {
                //string tableid = Convert.ToString(TempData["TableID"]);
                string ReportName = TempData["RPTNM"].ToString();
                string ReportType = TempData["RPTTP"].ToString();
                var getDRReport = (from n in db.AslDreportDbSet
                                   where n.COMPID == compid && n.RPTNM == ReportName && n.RPTTP == ReportType
                                   orderby n.RPTSL
                                   select n).ToList();
                var findFieldName = from m in db.AslTableFieldDbSet select new { m.FIELDID, m.FIELDNAME };
                <div class="col-md-8">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <tr>
                                <td>
                                    <h6>SL</h6>
                                </td>
                                <td><h6>Column Name</h6></td>
                                <td></td>
                            </tr>

                            @foreach (var item in getDRReport)
                            {

                                <tr>
                                    @Html.HiddenFor(model => item.ID)
                                    @Html.HiddenFor(model => item.COMPID)
                                    @Html.HiddenFor(model => item.RPTNM)
                                    @Html.HiddenFor(moddel => item.RPTTP)
                                    @Html.HiddenFor(model => item.TABLEID)

                                    <td>
                                        @Html.DisplayFor(model => item.RPTSL, new { style = "width:10em;" })
                                    </td>
                                    <td>
                                        @{
                                char[] delimiterChars = { ',', ' ' };
                                var fieldid = item.FIELDID;
                                string text = Convert.ToString(fieldid);
                                string[] words = text.Split(delimiterChars);
                                string name = "";
                                int i = 0;
                                foreach (string s in words)
                                {
                                    if (s != "")
                                    {
                                        foreach (var fileName in findFieldName)
                                        {
                                            if (fileName.FIELDID == s)
                                            {
                                                if (i == 0)
                                                {
                                                    name = name + Convert.ToString(fileName.FIELDNAME);
                                                    i++;
                                                }
                                                else
                                                {
                                                    name = name + ", " + Convert.ToString(fileName.FIELDNAME);
                                                }

                                            }
                                        }
                                    }
                                }


                                        }
                                        @name
                                      
                                    </td>

                                    <td>
                                        <span>
                                            <a href="@Url.Action("Delete", new { id = item.ID, cid = item.COMPID, reportName = item.RPTNM, reportType = item.RPTTP, tableID = item.TABLEID, sl = item.RPTSL })" class="btn btn-sm btn-danger">
                                                <span class="glyphicon glyphicon-remove"></span>
                                            </a>
                                        </span>
                                    </td>
                                </tr>

                            }

                        </table>
                    </div>
                </div>
                <div class="col-md-2"></div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped"></table>
                </div>
            }
        </div>

    </div>*@




    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
            //function positionError(position) {
            //    alert("!!! Error: "+position.code);
            //}
        });
    </script>




    <script language="javascript" type="text/javascript">

        @*$(document).ready(function () {
            $('#txtRPTNM').autocomplete(
            {
                source: '@Url.Action("TagSearch", "DynamicReport")',
                change: txtOneChanged,

            });
        });

        function txtOneChanged() {*@

        //var changedTextRPTNM = $("#txtRPTNM").val();
        //var changedTextCompId = $("#txtCompId").val();
        //var txtRPTTP = document.getElementById('txtRPTTP');

        //$.getJSON(
        //"/DynamicReport/ReportNameChanged", { "ChangedTextRPTNM": changedTextRPTNM, "ChangedTextCompId": changedTextCompId },


        //function (myData) {
        //    txtRPTTP.value = myData.RPTTP;
        //    document.getElementById("txtRPTTP").focus();

        //});
        //    $('#txtRPTTP').val("");
        //    $('#txtTABLEID').val("");
        //}


        $(function () {
            $('#txtRPTNM').change(function () {
                $('#txtRPTTP').val("");
                $('#txtTABLEID').val("");
            });


            $('#txtRPTTP').change(function () {
                $('#SearchButtonID').click();
            });

            $('#txtTABLEID').change(function () {
                var dropDownJobType = $('#txtTABLEID option:selected').val();
                //...................
                $.getJSON('/DynamicReport/TABLEIDFieldChanged', { "DropDownJobType": dropDownJobType },
                    function (result) {
                        var ddl = $('#txtFieldName');
                        ddl.empty();
                        $("#txtFieldName").append('<option value="'
                               + "select" + '">'
                               + "select" + '</option>');
                        $(result).each(function () {
                            $(document.createElement('option'))
                                .attr('value', this.Value)
                                .text(this.Text)
                                .appendTo(ddl);
                        });
                    });

                //......................
            });
        });

    </script>

    <style type="text/css">
        .ui-autocomplete {
            position: absolute;
            cursor: default;
            background: #f0ffff;
        }

        /* workarounds */
        html .ui-autocomplete {
            width: 1px;
        }
        /* without this, the menu expands to 100% in IE6 */
        .ui-menu {
            list-style: none;
            padding: 2px;
            margin: 0;
            display: block;
            float: left;
        }

            .ui-menu .ui-menu {
                margin-top: -3px;
            }

            .ui-menu .ui-menu-item {
                margin: 0;
                padding: 0;
                zoom: 1;
                float: left;
                clear: left;
                width: 100%;
            }

                .ui-menu .ui-menu-item a {
                    text-decoration: none;
                    display: block;
                    padding: .2em .4em;
                    line-height: 1.5;
                    zoom: 1;
                }

                    .ui-menu .ui-menu-item a.ui-state-hover,
                    .ui-menu .ui-menu-item a.ui-state-active {
                        font-weight: normal;
                        margin: -1px;
                    }
    </style>

}



<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<link href="~/Content/jquery.jqGrid/ui.jqgrid.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
