@using System.Data
@using System.Data.SqlClient
@using Mvc_CNFApp.Models
@model Mvc_CNFApp.Models.CNF_JOB

@{
    ViewBag.Title = "Create";

    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }

    CnfDbContext db = new CnfDbContext();
    Int64 compid = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);


    List<SelectListItem> listRegID = new List<SelectListItem>();
    listRegID.Add(new SelectListItem { Text = "CHITTAGONG", Value = "CHITTAGONG" });
    listRegID.Add(new SelectListItem { Text = "COMILLA", Value = "COMILLA" });
    listRegID.Add(new SelectListItem { Text = "BENAPOLE", Value = "BENAPOLE" });
    listRegID.Add(new SelectListItem { Text = "DEPZ", Value = "DEPZ" });
    listRegID.Add(new SelectListItem { Text = "ICD", Value = "ICD" });
    listRegID.Add(new SelectListItem { Text = "AEPZ", Value = "AEPZ" });
    listRegID.Add(new SelectListItem { Text = "AIRPORT", Value = "AIRPORT" });

    List<SelectListItem> listJobType = new List<SelectListItem>();
    listJobType.Add(new SelectListItem { Text = "IMPORT", Value = "IMPORT" });
    listJobType.Add(new SelectListItem { Text = "EXPORT", Value = "EXPORT" });

    List<SelectListItem> listStatus = new List<SelectListItem>();
    listStatus.Add(new SelectListItem { Text = "Active", Value = "A" });
    listStatus.Add(new SelectListItem { Text = "Inactive", Value = "I" });

    //Party Name: [ ] ,Party Nam Field loaded in DropdownList
    List<SelectListItem> listAccountName = new List<SelectListItem>();
    var result = (from n in db.GlAcchartDbSet
                  where n.COMPID == compid
                  select n).ToList();

    foreach (var n in result)
    {
        GL_ACCHART aGlAcchart = db.GlAcchartDbSet.FirstOrDefault(e => e.ACCOUNTCD == n.ACCOUNTCD);
        string substring = Convert.ToString(aGlAcchart.ACCOUNTCD);
        string subres = substring.Substring(3, 3);
        if (subres == "103")
        {
            listAccountName.Add(new SelectListItem { Text = aGlAcchart.ACCOUNTNM, Value = aGlAcchart.ACCOUNTCD.ToString() });
        }


    }

    List<SelectListItem> exchangetype = new List<SelectListItem>();
    exchangetype.Add(new SelectListItem { Text = "BDT", Value = "BDT" });
    exchangetype.Add(new SelectListItem { Text = "USD", Value = "USD" });
    exchangetype.Add(new SelectListItem { Text = "EURO", Value = "EURO" });
    
    exchangetype.Add(new SelectListItem { Text = "JPY", Value = "JPY" });
    exchangetype.Add(new SelectListItem { Text = "GBP", Value = "GBP" });
    exchangetype.Add(new SelectListItem { Text = "CHF", Value = "CHF" });



    TimeZoneInfo timeZoneInfo;
    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("Central Asia Standard Time");
    DateTime currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);

}

@*<link href="~/Content/bootstrap%20datepicker%20css/datepicker.css" rel="stylesheet" />*@
<link href="~/Content/bootstrap_datepicker_css/datepicker3.css" rel="stylesheet" />

<script src="~/Scripts/bootstrap-datepicker.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.COMPID, new { @Value = compid })

    <div id="contentHeaderBox">
        <h1 style="padding-left:16px">Create Job Information</h1>
        @if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A")
        {
            var createStatus = "";
            var updateStatus = "";
            var deleteStatus = "";
            var status = "";
            var loggedUserID = HttpContext.Current.Session["loggedUserID"].ToString();
            System.Data.SqlClient.SqlConnection conn = new System.Data.SqlClient.SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["CnfDbContext"].ToString());

            string query1 = string.Format("SELECT STATUS, INSERTR, UPDATER, DELETER FROM ASL_ROLE WHERE  CONTROLLERNAME='JobInformation' AND COMPID='{0}' AND USERID = '{1}'", compid, loggedUserID);

            System.Data.SqlClient.SqlCommand cmd1 = new System.Data.SqlClient.SqlCommand(query1, conn);
            conn.Open();

            SqlDataAdapter da1 = new SqlDataAdapter(cmd1);
            DataTable ds1 = new DataTable();
            da1.Fill(ds1);

            foreach (DataRow row in ds1.Rows)
            {
                status = row["STATUS"].ToString();
                createStatus = row["INSERTR"].ToString();
                updateStatus = row["UPDATER"].ToString();
                deleteStatus = row["DELETER"].ToString();
            }
            conn.Close();
            if (createStatus == "A")
            {

            }
            else if (updateStatus == "A")
            {
                Response.Redirect("~/JobInformation/FirstPartUpdate");
            }
            else if (deleteStatus == "A")
            {
                Response.Redirect("~/JobInformation/Delete");
            }


            if (createStatus == "I")
            {
                Response.Redirect(Url.Action("Index", "Logout"));
            }
            <div class="btn-group pull-right" id="editOption">
                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                    <i class="fa fa-cog"></i>
                </button>
                <ul class="dropdown-menu pull-right" style="" role="menu">
                    @if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "JobInformation")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("FirstPartUpdate", "JobInformation")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "JobInformation")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("FirstPartUpdate", "JobInformation")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "JobInformation")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "JobInformation")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("FirstPartUpdate", "JobInformation")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString() && deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "JobInformation")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Delete", "JobInformation")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                    else if (createStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Create", "JobInformation")"><i class="fa fa-plus"></i> Create</a>
                        </li>
                    }
                    else if (updateStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("FirstPartUpdate", "JobInformation")"><i class="fa fa-edit"></i> Update</a>
                        </li>
                    }
                    else if (deleteStatus == 'A'.ToString())
                    {
                        <li>
                            <a href="@Url.Action("Delete", "JobInformation")"><i class="fa fa-times"></i> Delete</a>
                        </li>
                    }
                </ul>
            </div>

        }

    </div>
    <br />
    <div class="col-md-12">
        @if (TempData["JOBCreationMessage"] != null)
        {
            <div class="panel-heading text-center">
                <h4 style="color: #226699">@TempData["JOBCreationMessage"]</h4>
            </div>
        }
        <div class="form-group">
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.JOBCDT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.JOBCDT, htmlAttributes: new { id = "idJOBCDT", @class = "form-control input-sm"})

                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.JOBYY, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.JOBYY, htmlAttributes: new { id = "txtjobYear", @class = "form-control input-sm", @readonly = "readonly",tabIndex="-1" })
                    @Html.ValidationMessageFor(model => model.JOBYY, "", new { @class = "text-danger" })
                </div>
            </div>

            <br />
            <div class="row">
               
               
                <div class="col-md-2">
                    @Html.LabelFor(model => model.JOBTP, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.JOBTP, listJobType, "-Select-", htmlAttributes: new { id = "ddltxtJobType", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.JOBTP, "", new { @class = "text-danger" })
                </div>
                
                <div class="col-md-3">
                    @Html.LabelFor(model => model.JOBNO, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.JOBNO, htmlAttributes: new { id = "txtJOBNO", @class = "form-control input-sm", @readonly = "readonly", tabIndex = "-1" })
                </div>
            </div>
            <br />
           
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.REGID, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.REGID, listRegID, "-Select-", htmlAttributes: new { id = "ddltxtRedID", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.REGID, "", new { @class = "text-danger" })
                </div>
               
                <div class="col-md-3">
                    @Html.Label("Name", "Party Name", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.PARTYID, listAccountName, "-Select-", htmlAttributes: new { id = "txtpartyid", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.PARTYID, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.CONSIGNEENM, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CONSIGNEENM, htmlAttributes: new { @class = "form-control input-sm", id = "CONSIGNEENM" })
                </div>
               
                <div class="col-md-3">
                    @Html.LabelFor(model => model.CONSIGNEEADD, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CONSIGNEEADD, htmlAttributes: new { @class = "form-control input-sm" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.SUPPLIERNM, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.SUPPLIERNM, htmlAttributes: new { @class = "form-control input-sm" })
                </div>
               
                <div class="col-md-3">
                    @Html.LabelFor(model => model.PKGS, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.PKGS, htmlAttributes: new { @class = "form-control input-sm" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.GOODS, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.GOODS, htmlAttributes: new { @class = "form-control input-sm" })
                </div>
              
                <div class="col-md-3">
                    @Html.LabelFor(model => model.WTGROSS, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.WTGROSS, htmlAttributes: new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.WTGROSS, "", new { @class = "text-danger" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.WTNET, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.WTNET, htmlAttributes: new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.WTNET, "", new { @class = "text-danger" })
                </div>
               
            </div>
            <hr />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.CNFV_USD, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CNFV_USD, htmlAttributes: new { id = "txtCnfUSD", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.CNFV_USD, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.CRFV_USD, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CRFV_USD, htmlAttributes: new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.CRFV_USD, "", new { @class = "text-danger" })
                </div>
               
               
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.CNFV_ERT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CNFV_ERT, htmlAttributes: new { id = "txtCnfERT", @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.CNFV_ERT, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(model => model.CNFV_ETP, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.CNFV_ETP, exchangetype, "--select--", htmlAttributes: new { id = "txtExchangeType", @class = "form-control input-sm" })
                </div>
            </div>
            <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.CNFV_BDT, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.CNFV_BDT, htmlAttributes: new { id = "txtCnfBDT", @class = "form-control input-sm", @readonly = "readonly", tabIndex = "-1" })
                        @Html.ValidationMessageFor(model => model.CNFV_BDT, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-5">
                        @Html.LabelFor(model => model.COMMAMT, htmlAttributes: new { @class = "control-label", id = "txtmsg" })
                    </div>
                   

                </div>
                <hr />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.ASSV_BDT, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.ASSV_BDT, htmlAttributes: new { id = "txtCnfAssvBDT", @class = "form-control input-sm" })
                        @Html.ValidationMessageFor(model => model.ASSV_BDT, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.COMMAMT, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.COMMAMT, htmlAttributes: new { id = "txtcommission", @class = "form-control input-sm" })
                        @Html.ValidationMessageFor(model => model.COMMAMT, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.CONTNO, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.CONTNO, htmlAttributes: new { @class = "form-control input-sm",id="container" })
                    </div>
                    <div class="col-md-3">
                        @*@Html.LabelFor(model => model.CONTNO, htmlAttributes: new { @class = "control-label" })*@
                        @Html.Label("Flight No", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.FLIGHTNO, htmlAttributes: new { @class = "form-control input-sm", id = "FLIGHTNO" })
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.DOCINVNO, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.DOCINVNO, htmlAttributes: new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-3">
                        @*@Html.LabelFor(model => model.DOCINVDT, htmlAttributes: new { @class = "control-label" })*@
                        @Html.Label("Invoice Date", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.DOCINVDT, htmlAttributes: new { id = "idDOCINVDT", @class = "form-control input-sm" })
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.PERMITNO, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.PERMITNO, htmlAttributes: new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.PERMITDT, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.PERMITDT, htmlAttributes: new { id = "idPERMITDT", @class = "form-control input-sm" })
                    </div>
                </div>
               
              
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.BENO, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.BENO, htmlAttributes: new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.BEDT, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.BEDT, htmlAttributes: new { id = "idBEDT", @class = "form-control input-sm" })
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-2">
                        @Html.LabelFor(model => model.LCNO, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.LCNO, htmlAttributes: new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.LCDT, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-3">
                        @Html.TextBoxFor(model => model.LCDT, htmlAttributes: new { id = "idLCDT", @class = "form-control input-sm" })
                    </div>
                </div>
            <br/>
            <div class="row">
                <div class="col-md-2">
                    @Html.Label("BL No", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.BLNO, htmlAttributes: new { id = "txtBLNO", @class = "form-control input-sm" })
                </div>

                <div class="col-md-3">
                    @Html.Label("BL Date", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.BLDT, htmlAttributes: new { id = "idBLDT", @class = "form-control input-sm" })
                </div>
            </div>
            <br />
                <hr />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.BILLNOM, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.BILLNOM, htmlAttributes: new { @class = "form-control input-sm" })
                </div>
               
                <div class="col-md-3">
                    @Html.LabelFor(model => model.BILLFDT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.BILLFDT, htmlAttributes: new { id = "idBILLFDT", @class = "form-control input-sm" })
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.STATUS, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.STATUS, listStatus, htmlAttributes: new { @class = "form-control input-sm" })
                    @Html.ValidationMessageFor(model => model.STATUS, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-3">
                    @Html.Label("CBM", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-3">
                    @Html.TextBoxFor(model => model.CBM, htmlAttributes: new { id = "idCBM", @class = "form-control input-sm" })
                </div>
               
            </div>

                @Html.TextBoxFor(model => model.INSLTUDE, new { id = "latlon", style = "display: none;" })
                <input id="lat" type="hidden" />
                <input id="lon" type="hidden" />

                <br />
                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-4">
                        <input type="submit" class="btn btn-primary btn-block" value="Create" />
                    </div>
                    <div class="col-md-4"></div>
                </div>

            </div>
    </div>





    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
           
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#idJOBCDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true,
                todayHighlight: true,
                showOnFocus: true
            }).on('show', function (e) {
                if (e.date) {
                    $(this).data('stickyDate', e.date);
                }
                else {
                    $(this).data('stickyDate', null);

                }
            }).on('hide', function () {
               
            });
            $('#idDOCINVDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });
            $('#idPERMITDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });
            $('#idBILLDTM').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });
            $('#idBILLFDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });
            $('#idBEDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });
            $('#idLCDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });
            $('#idBLDT').datepicker({
                format: "dd-M-yyyy",
                autoclose: true
                //format: "yyyy-M-dd"
            });

            $('#idJOBCDT').change(function () {
                //When the UserName (Dropdown list) changed then get the "User ID" from "ASLUSERCO" table
                var changedtxt = $('#idJOBCDT').val();

                var txtjobYear = document.getElementById('txtjobYear');
                var ddltxtJobType = $('#ddltxtJobType').val();
                var txtJOBNO = document.getElementById('txtJOBNO');
                $("#txtjobYear").val(" ");
                $.getJSON(
                    "/JobInformation/DateChanged_getYear", { "Changedtxt": changedtxt, "DdltxtJobType": ddltxtJobType },
                    function (myData) {
                        txtjobYear.value = myData.YEAR;
                        //txtJOBNO.value = myData.JOBNO;
                        document.getElementById("ddltxtJobType").focus();
                    });

            });
            $('#ddltxtJobType').change(function () {
                //When the UserName (Dropdown list) changed then get the "User ID" from "ASLUSERCO" table
                var idJOBCDT = $('#idJOBCDT').val();
                var ddltxtJobType = $('#ddltxtJobType').val();
                var txtJOBNO = document.getElementById('txtJOBNO');
                $("#txtJOBNO").val(" ");

                $.getJSON(
                    "/JobInformation/GetJobNO", { "IdJOBCDT": idJOBCDT, "DdltxtJobType": ddltxtJobType },
                    function (myData) {
                        txtJOBNO.value = myData.JOBNO;
                        document.getElementById("ddltxtRedID").focus();
                    });

            });
            $('#txtCnfUSD').keydown(function (e) {
                if (e.which == 9) {
                    var exchangerate = $('#txtCnfERT').val();
                    var valueUSD = $('#txtCnfUSD').val();
                    var CnfBDT = document.getElementById('txtCnfBDT');
                    $("#txtCnfBDT").val(" ");
                    $.getJSON(
                       "/JobInformation/CNFBDT", { "ExchangeRate": exchangerate, "ValueUSD": valueUSD },
                       function (myData) {
                           CnfBDT.value = myData.Valueusd;
                           //document.getElementById("txtCnfBDT").focus();
                       });
                }
                
            });
            $('#txtCnfERT').keydown(function (e) {
                if (e.which == 9) {
                    var exchangerate = $('#txtCnfERT').val();
                    var valueUSD = $('#txtCnfUSD').val();
                    var CnfBDT = document.getElementById('txtCnfBDT');
                    $("#txtCnfBDT").val(" ");
                    $.getJSON(
                       "/JobInformation/CNFBDT", { "ExchangeRate": exchangerate, "ValueUSD": valueUSD },
                       function (myData) {
                           CnfBDT.value = myData.Valueusd;
                           //document.getElementById("txtCnfBDT").focus();
                       });
                }
               
            });
            $('#txtCnfAssvBDT').keydown(function (e) {
                if (e.which == 9) {
                    var AssvBDT = $('#txtCnfAssvBDT').val();
                    var partyid = $('#txtpartyid').val();
                    var exchangetp = $('#txtExchangeType').val();
                    var commission = document.getElementById('txtcommission');
                    $("#txtcommission").val("");
                    $.getJSON(
                      "/JobInformation/ForCommissionCalculation", { "CnfAssvBDT": AssvBDT, "CnfPartyId": partyid, "CnfExchangeTp": exchangetp },
                      function (myData) {
                          commission.value = myData.commit;
                          document.getElementById("container").focus();
                          var msg = myData.Type;
                          if (msg == "Amount")
                          {
                              $('#txtmsg').text("Fixed Amount: " + myData.commit + "\n" + myData.Remarks);
                          }
                          else if(msg=="Percentage")
                          {
                              $('#txtmsg').text("Your Commission Percentage : " + myData.Percentage + "\n" + myData.Remarks);
                          }
                          
                         
                      });
                }
               
            });

           

           


        });
           
      
       
    </script>

   
}


@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
